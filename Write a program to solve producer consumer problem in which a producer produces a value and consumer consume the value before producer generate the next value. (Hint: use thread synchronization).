class SharedResource {
 private int data;
 private boolean hasData = false; // Flag to check if data is available
 // Producer method
 public synchronized void produce(int value) {
 while (hasData) { // Wait if data is already produced
 try {
 wait();
 } catch (InterruptedException e) {
 System.out.println("Producer interrupted!");
 }
 }
 data = value;
 hasData = true;
 System.out.println("Produced: " + data);
 notify(); // Notify consumer
 }
 // Consumer method
 public synchronized void consume() {
 while (!hasData) { // Wait if no data available
 try {
 wait();
 } catch (InterruptedException e) {
 System.out.println("Consumer interrupted!");
 }
 }
 System.out.println("Consumed: " + data);
 hasData = false;
 notify(); // Notify producer
 }
}
// Producer Thread
class Producer extends Thread {
 private SharedResource resource;
 public Producer(SharedResource resource) {
 this.resource = resource;
 }
 public void run() {
 for (int i = 1; i <= 5; i++) {
 resource.produce(i); // Producing values 1 to 5
 try {
 Thread.sleep(1000); // Simulating time taken to produce
 } catch (InterruptedException e) {
 e.printStackTrace();
 }
 }
 }
}
// Consumer Thread
class Consumer extends Thread {
 private SharedResource resource;
 public Consumer(SharedResource resource) {
 this.resource = resource;
 }
 public void run() {
 for (int i = 1; i <= 5; i++) {
 resource.consume();
 try {
 Thread.sleep(2000); // Simulating time taken to consume
 } catch (InterruptedException e) {
 e.printStackTrace();
 }
 }
 }
}
// Main Class
public class ProducerConsumerDemo {
 public static void main(String[] args) {
 SharedResource resource = new SharedResource();
 Producer producer = new Producer(resource);
 Consumer consumer = new Consumer(resource);
 producer.start();
 consumer.start();
 }
}
